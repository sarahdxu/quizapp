"""
COMP211 Lab 4: Testing and type-checking
Check for type errors using mypy
Sarah Xu
"""

1. Mypy didn't detect any type errors. It should, however, because the function anticipates a float, but sum//len(xs) gives an integer value. I think the reason Mypy doesn't detect this error is because, as discussed in class, Python is very lenient about operations.

2. lab4.py: In function "average":
   lab4.py, line 45: Incompatible return value type: expected builtins.float, got builtins.list[builtins.int]
   
   Mypy reported a type error because instead of returning an expected float, we instead tried to return a list.

3. Mypy didn't detect any errors. Forgetting the return statement is th same as "return None". Mypy should still report an error because the function expects to return a float.

4. lab4.py: In function "average":
   lab4.py, line 42: Unsupported operand types for + ("str" and "int")
   lab4.py, line 42: Incompatible types in assignment (expression has type "int", variable has type "str")
   lab4.py, line 45: Unsupported operand types for / ("str" and "int")

   Mypy reported an error because of unsupported operations. It is not possible to add different types - in this case, it is not allowable to perform mathematical operations on strings and integers.


5. lab4.py: In function "average":
    lab4.py, line 45: Incompatible return value type: expected builtins.float, got def (x: Union[typing.SupportsInt, builtins.str, Union[builtins.bytes, builtins.bytearray]] =, base: builtins.int =) -> builtins.int

   Mypy reported a type error because it expected to return a float, but instead we tried to return an int value. Something I noticed was how this was reported, but back problem #1 wasn't reported. Essentially the same actions were made in that the result was trying to return in int, but for some reason there wasn't a problem with #1. Again, I think this is because of Python's leniency when performing operations.
